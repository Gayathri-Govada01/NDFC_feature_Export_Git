##template properties
name =Ext_VRF_Lite_Jython;
description = Creates sub-intf and eBGP peering for VRF Lite on external fabric devices;
tags = ;
userDefined = true;
supportedPlatforms = All;
templateType = POLICY;
templateSubType = DEVICE;
contentType = PYTHON;
implements =implements;
dependencies = ;
published = false;
imports = ;
##
##template variables

#    Copyright (c) 2020 by Cisco Systems, Inc.
#    All rights reserved.

@(IsInternal=true)
string SERIAL_NUMBER;

@(IsInternal=true)
string SOURCE;

@(IsInternal=true)
string POLICY_ID;

@(DisplayName="Layer-3 Interface", Description="Subinterface Parent interface (e.g. e1/14, Ethernet1/14)")
interface IF_NAME;

@(DisplayName="Encapsulation dot1q VLAN ID", Description="2-4094, value needs to be in switch allowed range")
integer DOT1Q_ID {
  min = 2;
  max = 4094;
};

@(IsMandatory=false, DisplayName="VRF Name", Description="Subinterface VRF name, default VRF if not specified")
string PEER_VRF_NAME {
  minLength = 1;
  maxLength = 32;
};

@(IsMandatory=false, DisplayName="Subinterface IPv4 Address/Netmask", Description="For IPv4 VRF Lite peering")
ipV4AddressWithSubnet IP_MASK;

@(DisplayName="Subinterface MTU", IsMTU=true, Description="Layer-3 MTU (Min:576, Max:9216)")
integer MTU {
min = 576;
max = 9216;
defaultValue=9216;
};

@(IsMandatory="IP_MASK!=null", DisplayName="Neighbor IPv4 Address", Description="BGP Peer IPv4 Address")
ipV4Address NEIGHBOR_IP;

@(DisplayName="Neighbor ASN", Description="BGP ASN of IPv4/IPv6 Neighbor")
string NEIGHBOR_ASN;

@(IsMandatory=false, DisplayName="Subinterface IPv6 Address/Prefix Length", Description="For IPv6 VRF Lite peering")
ipV6AddressWithSubnet IPV6_MASK;

@(IsMandatory="IPV6_MASK!=null", DisplayName="Neighbor IPv6 Address", Description="BGP Peer IPv6 Address")
ipV6Address IPV6_NEIGHBOR;

@(IsMandatory=false, DisplayName="Enable TRM", Description="Enable Tenant Routed Multicast")
boolean TRM_ENABLE;

@(IsMandatory=false, DisplayName="Enable TRMv6", Description="Enable IPv6 Tenant Routed Multicast")
boolean TRMv6_ENABLE;

@(IsMandatory=false, DisplayName="Local ASN", Description="The fabric ASN will be used if not specified")
string asn;

@(IsMandatory=false, DisplayName="BGP Neighbor<br/>Password", Description="Hex String")
string bgpPassword {
minLength = 1;
maxLength = 130;
regularExpr=^[a-fA-F0-9]+$;
};

@(IsMandatory=false, IsShow="bgpPassword!=null", DisplayName="BGP Password<br/>Key Encryption Type", Description="BGP Key Encryption Type: 3 - 3DES, 7 - Cisco")
enum bgpPasswordKeyType {
    validValues=3,7;
    defaultValue=3;
};

@(IsMandatory=false, IsShow="PEER_VRF_NAME==''||PEER_VRF_NAME=='default'", DisplayName="Enable BGP Soft Reconfiguration", Description="Enable inbound soft reconfiguration. Applicable to default vrf only")
boolean ENABLE_SOFT_RECONFIG;

##
##template content

from com.cisco.dcbu.vinci.rest.services.jython import PTIWrapper
from com.cisco.dcbu.vinci.rest.services.jython import Wrapper
from com.cisco.dcbu.vinci.rest.services.jython import WrappersResp
from com.cisco.dcbu.vinci.rest.services.jython import Helper
from com.cisco.dcbu.vinci.rest.services.jython import InventoryWrapper
from com.cisco.dcbu.vinci.rest.services.jython import InterfaceManagerWrapper
from com.cisco.dcbu.vinci.rest.services.jython import InterfabricConnectionWrapper
from utility import *

def add():
    try:
        
        #if called by topdown, SOURCE will be set. Then user will not be able to edit from View/Edit policies
        jython_source  = ""
        try:
            jython_source = SOURCE
        except:
            jython_source = POLICY_ID
            pass
        
        SOURCE = jython_source
        eBGPPassword = ""
        eBGPPasswordKeyType = "3"
        try:
            eBGPPassword = bgpPassword
        except:
            pass
        try:
            eBGPPasswordKeyType = bgpPasswordKeyType
        except:
            pass

        try:
            softReconfig = ENABLE_SOFT_RECONFIG
        except:
            softReconfig = "false"

        Wrapper.print("Source of VRF Lite Jython is [%s] for switch [%s]. BGP Password [%s]/[%s]" %(SOURCE, SERIAL_NUMBER, 
                                            eBGPPassword, eBGPPasswordKeyType))

        src_intf = Util.exe(Helper.getInterfaceName2(IF_NAME))
        Wrapper.print("Interface provided %s -> %s" % (IF_NAME, src_intf))
        
        srchOpt = CtrlPolicySearch()
        srchOpt.setSerialNumber(SERIAL_NUMBER)
        srchOpt.setSource(SOURCE)
        srchOpt.setTemplateName( "int_subif_internal")
        ptiList = Util.exe(PTIWrapper.getPTIs(srchOpt))
        if ptiList:
            for pti in ptiList:
                oldValue = pti.getEntityName()
                oldInterface = oldValue.split(".")[0]
                #Compare the physical interface, it should be the same
                if oldInterface != src_intf:
                    Wrapper.print("Error case: Old: %s New %s" %(oldInterface, src_intf))
                    errorMsg = ("New parent interface %s not matching old one %s" % (oldInterface, src_intf))
                    respObj = WrappersResp.getRespObj()
                    respObj.addErrorReport(("Error"), errorMsg)
                    respObj.setFailureRetCode()
                    return respObj

                break
            
        #Validate neighbor ASN format
        respObj = Helper.isValidAsn (NEIGHBOR_ASN)
        if respObj.isRetCodeFailure():
            errorMsg = ("Invalid Neighbor ASN %s" % (NEIGHBOR_ASN))
            respObj.addErrorReport(("Error"), errorMsg)
            return respObj

        try:
            if asn:
                respObj = Helper.isValidAsn(asn)
                if respObj.isRetCodeFailure():
                    errorMsg = ("Invalid Local ASN %s" % (asn))
                    respObj.addErrorReport(("Error"), errorMsg)
                    return respObj
        except:
            pass

        # get fabric for switch with this serial number
        inventoryResp = InventoryWrapper.getFabricNameForSwitch(SERIAL_NUMBER)
        if inventoryResp.isRetCodeSuccess():
            fabricName = inventoryResp.getValue()
            Wrapper.print("Inventory wrapper response fabric name is %s" %(fabricName))
        else:
            Wrapper.print("Invalid fabric for switch %s" %(SERIAL_NUMBER))
            return inventoryResp
             
        # Interface specified can only be a routed interface: Ethernet or L3 Port-channel
        interfaceResp = InterfaceManagerWrapper.isRoutedPort(SERIAL_NUMBER, src_intf)
        if interfaceResp.isRetCodeSuccess():
            routedFlag = interfaceResp.getValue()
            if routedFlag != True:
                  errorMsg = ("Interface %s is not a routed interface" % (IF_NAME))
                  respObj = WrappersResp.getRespObj()
                  respObj.addErrorReport(("Error"), errorMsg)
                  respObj.setFailureRetCode()
                  return respObj
        else:
            Wrapper.print("Invalid interface wrapper response for %s %s" %(SERIAL_NUMBER, IF_NAME))
            return interfaceResp
        
        #Only vaid cases are routed interfaces and l3 port-channels
        if ("ethernet" in src_intf.lower() or "port-channel" in src_intf.lower()):
            intfName = src_intf + "." + DOT1Q_ID
        else:
            respObj = WrappersResp.getRespObj()
            errorMsg = ("[%s] Invalid interface provided for VRF Lite Peering" % (src_intf))
            respObj.addErrorReport(("Error"), errorMsg)            
            respObj.setFailureRetCode()
            return respObj

        minVlan, maxVlan = Util.getDot1qRange()
        if (int(DOT1Q_ID) < minVlan) or (int(DOT1Q_ID) > maxVlan):
            errorMsg = "Dot1q Vlan ID %s is out of the allowed Dot1q range (%s, %s)." % (DOT1Q_ID, minVlan, maxVlan)
            Wrapper.print(errorMsg)
            respObj = WrappersResp.getRespObj()
            respObj.addErrorReport("add", errorMsg)
            respObj.setFailureRetCode()
            return respObj

        # modify to be done, calling delete now to clean up PTIs before add
        Wrapper.print("Calling delete of PTIs for SOURCE %s" %(SOURCE))
        delete(True)
        
        # For default vrf in external fabric, should RM be done?
        # As of DCNM 11.2: Subinteraces do not have any RM handling
        rmIds = []

        IP, PREFIX = IP_MASK.split("/") if IP_MASK else ("","")
        IPv6, IPv6_PREFIX = IPV6_MASK.split("/") if IPV6_MASK else ("","")
        
        peerVrfName = "default" if PEER_VRF_NAME == "" or PEER_VRF_NAME.lower() == "default" else PEER_VRF_NAME

        try:
            if IPV6_MASK == "":
                trmv6_enable = "false"
            else:
                trmv6_enable = TRMv6_ENABLE
        except:
            trmv6_enable = "false"

        # Create sub-interface for VRF Lite Extension
        # TODO: Need to set source so that the user cannot delete subinterface or bgp neighbors individually
        new_nvPairs = {"INTF_NAME" : intfName,
                       "VLAN" : DOT1Q_ID,
                       "IP" : IP,
                       "PREFIX" : PREFIX,
                       "INTF_VRF" : peerVrfName,
                       "IPv6": IPv6,
                       "IPv6_PREFIX": IPv6_PREFIX,
                       "MTU" : MTU,
                       "ADMIN_STATE" : "true",
                       "TRM_ENABLE" : TRM_ENABLE,
                       "TRMv6_ENABLE" : trmv6_enable,
                       "DESC" : "",
                       "CONF" : ""
                      }
        Wrapper.print("adding sub-interface %s, nvPairs %s" % (new_nvPairs["INTF_NAME"], new_nvPairs))

        Util.exe(PTIWrapper.createOrUpdate(SERIAL_NUMBER, "INTERFACE", new_nvPairs["INTF_NAME"], SOURCE,
                                           ConfigPriority.CONFIG_PRIO_INTF, rmIds,
                                           "int_subif_internal", new_nvPairs))
                                           
        # try to honor the ASN passed in
        fabricAsn = localAsn = ""
        try:
            fabricAsn = asn
        except:
            pass

        if ((fabricAsn == None) or (fabricAsn == "")):
            # the ASN does not seem valid... use the current fabric/switch ASN
            fabricTech = Util.exe(FabricWrapper.getFabricTechnology(fabricName))
            if fabricTech == "EBGPVXLANFabric" or fabricTech == "eBGP_Routed_Fabric":
                fabricAsn = Util.getEbgpDeviceAsn(SERIAL_NUMBER, fabricName)
            else:
                helperResp = Helper.getFabricAsn(fabricName)
                if helperResp.isRetCodeSuccess():
                    fabricAsn = helperResp.getValue()
                else:
                    Wrapper.print("Invalid ASN for Fabric %s" %(fabricName))
                    return helperResp
        else:
            # local ASN is provided. Check whether needs to configure local-as
            # local-as is generated in External Fabric, core or edge router if user provided asn
            # is different from External Fabric ASN
            fabric_type = Util.exe(Helper.getFabricType(fabricName))
            if fabric_type == "External":
                switchRole = Util.exe(InterfabricConnectionWrapper.getSwitchRole(SERIAL_NUMBER))
                if "core" in switchRole or "edge" in switchRole:
                    helperResp = Helper.getFabricAsn(fabricName)
                    if helperResp.isRetCodeSuccess():
                        fabricAsn = helperResp.getValue()
                    else:
                        Wrapper.print("Invalid ASN for Fabric %s" %(fabricName))
                        return helperResp
                    if asn != fabricAsn:
                        localAsn = asn

        if ((fabricAsn == None) or (fabricAsn == "")):
            # we still have an invalid ASN
            errorMsg = ("Could not determine the BGP ASN for fabric [%s]" % (fabricName))
            respObj = WrappersResp.getRespObj()
            respObj.addErrorReport("VRF-LITE-AUTO_EXT:INVALID_ASN", errorMsg)
            respObj.setFailureRetCode()
            return respObj

        #Create VRF (if non-default VRF) and eBGP peering for VRF Lite
        nvPairs = {"vrfName": peerVrfName, "vrfDescription": "", "asn": fabricAsn, "VRF_LOCAL_ASN": localAsn,
                   "NEIGHBOR_ASN": NEIGHBOR_ASN, "bgpPassword" : eBGPPassword, "bgpPasswordKeyType"  : eBGPPasswordKeyType,
                   "NEIGHBOR_IP": NEIGHBOR_IP, "IPV6_NEIGHBOR": IPV6_NEIGHBOR, "ENABLE_SOFT_RECONFIG": softReconfig}
        
        Wrapper.print("Creating External_VRF_Lite_eBGP with nvPairs %s" % (nvPairs))
        Util.exe(PTIWrapper.create(SERIAL_NUMBER, "SWITCH", "SWITCH", SOURCE,
                                   ConfigPriority.CONFIG_PRIO_UNDERLAY_TOP_LVL1 + 1,
                                   "External_VRF_Lite_eBGP", nvPairs))

        respObj = WrappersResp.getRespObj()
        respObj.setSuccessRetCode()
        return respObj
    except respObjError as e:
        return e.value

def delete(Force=False):
    try:
        src_intf = Util.exe(Helper.getInterfaceName2(IF_NAME))
        Wrapper.print("Interface provided %s -> %s" % (IF_NAME, src_intf))
        if Force:
            IP, PREFIX = IP_MASK.split("/") if IP_MASK else ("","")
            IPv6, IPv6_PREFIX = IPV6_MASK.split("/") if IPV6_MASK else ("","")
            Wrapper.print("IPMask %s ipv6 mask %s PREFIX %s, IPv6_PREFIX %s" % (IP_MASK, IPV6_MASK, PREFIX,IPv6_PREFIX))

            v4SkipDel = True if PREFIX and (int(PREFIX) < 8 or int(PREFIX) > 31) else False
            v6SkipDel = True if IPv6_PREFIX and (int(IPv6_PREFIX) < 64 or int(IPv6_PREFIX) > 127) else False
            if v4SkipDel or v6SkipDel:
                Wrapper.print("Ext_VRF_Lite_Jython (intf %s): upgrade case, just skip so that template validation "
                              "error reports warning and no change on ptis" % (src_intf))
                respObj = WrappersResp.getRespObj()
                respObj.setSuccessRetCode()
                return respObj

        if ("ethernet" in src_intf.lower() or "port-channel" in src_intf.lower()):
            intfName = src_intf + "." + DOT1Q_ID
        else:
            respObj = WrappersResp.getRespObj()
            errorMsg = ("[%s] Invalid interface provided for VRF Lite Peering" % src_intf)
            respObj.setFailureRetCode()
            return respObj        

        #if called by topdown, SOURCE will be set. Then user will not be able to edit from View/Edit policies
        jython_source  = ""
        try:
            jython_source = SOURCE
        except:
            jython_source = POLICY_ID
            pass
        
        SOURCE = jython_source
        Wrapper.print("Source of VRF Lite Jython is %s for switch %s" %(SOURCE, SERIAL_NUMBER))
        
        #Get all PTIs for the SOURCE VRF Lite Extension in external fabric
        wrappersResp = PTIWrapper.get(SERIAL_NUMBER, SOURCE)
        if wrappersResp.isRetCodeSuccess():
            vrfLitePolicies = wrappersResp.getValue()
            for policy in vrfLitePolicies:
                Wrapper.print("VRF Lite policy for External Fabric DELETE: %s %s" % (policy.getPolicyId(), policy.getTemplateName()))
                if policy.getTemplateName() == "int_subif_internal":
                    PTIWrapper.deleteInstance(policy.getPolicyId())
                else:
                    PTIWrapper.markDeleteInstance(policy.getPolicyId())

        #Get the PTI for the subinterface if any exists, this is to take care of the case where subintf is already created and then VRF Lite Jython is called
        srchOpt = CtrlPolicySearch()
        srchOpt.setSerialNumber(SERIAL_NUMBER)
        srchOpt.setEntityName(intfName)
        srchOpt.setTemplateContentType("PYTHON")
        subintPolicies = Util.exe(PTIWrapper.getPTIs(srchOpt))
        if subintPolicies:
            for policy in subintPolicies:
                Wrapper.print("Subinterface policy for External Fabric DELETE: %s %s" % (policy.getPolicyId(), policy.getTemplateName()))
                PTIWrapper.deleteInstance(policy.getPolicyId())

        respObj = WrappersResp.getRespObj()
        respObj.setSuccessRetCode()
        return respObj
    except respObjError as e:
        return e.value

##

